import os
import asyncio
import logging
from logging.handlers import RotatingFileHandler

import redis.asyncio as aioredis
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from functools import wraps
import config

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
log_dir = os.path.join(os.getcwd(), "logs")
os.makedirs(log_dir, exist_ok=True)

file_handler = RotatingFileHandler(
    os.path.join(log_dir, "tg_bot.log"),
    maxBytes=5_000_000,
    backupCount=3,
    encoding="utf-8"
)

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[file_handler, logging.StreamHandler()]
)

# --- Redis ---
async def get_redis():
    return aioredis.Redis(
        host=config.REDIS_HOST,
        port=int(config.REDIS_PORT),
        db=0,
        decode_responses=True
    )

# --- Telegram bot ---
bot = Bot(token=config.TG_BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å")],
        [KeyboardButton(text="‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç"), KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫ –ª–∏–º–∏—Ç—É")],
        [KeyboardButton(text="‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞")]
    ],
    resize_keyboard=True
)

cancel_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
    resize_keyboard=True
)

# --- –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª–∏–º–∏—Ç–∞ ---
def quick_limit_keyboard(mode="set"):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="50", callback_data=f"{mode}_limit:50"),
                InlineKeyboardButton(text="100", callback_data=f"{mode}_limit:100"),
                InlineKeyboardButton(text="150", callback_data=f"{mode}_limit:150"),
            ]
        ]
    )

async def monitor_limit():
    r = await get_redis()
    while True:
        try:
            limit = int(await r.get("chat_limit") or 0)
            count = int(await r.get("chat_count") or 0)
            remaining = max(0, limit - count) if limit > 0 else float('inf')
            
            warning_sent = await r.get("limit_warning_sent") == "1"

            if limit > 0 and remaining <= 15 and not warning_sent:
                # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                for user_id in config.ALLOWED_USERS:
                    try:
                        await bot.send_message(user_id, f"‚ö†Ô∏è –û—Å—Ç–∞–ª–æ—Å—å –≤—Å–µ–≥–æ {remaining} –ª–∏–º–∏—Ç–æ–≤ –∏–∑ {limit}!")
                    except Exception as e:
                        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                await r.set("limit_warning_sent", "1")
            elif remaining > 15 and warning_sent:
                # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥, –∫–æ–≥–¥–∞ –ª–∏–º–∏—Ç —Å–Ω–æ–≤–∞ –±–æ–ª—å—à–µ 15
                await r.set("limit_warning_sent", "0")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–∏–º–∏—Ç–∞: {e}")

        await asyncio.sleep(3600)

# --- FSM ---
class SetLimit(StatesGroup):
    waiting_for_number = State()

class AddLimit(StatesGroup):
    waiting_for_number = State()

from functools import wraps

def restricted(func):
    @wraps(func)
    async def wrapper(message_or_callback, *args, **kwargs):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if isinstance(message_or_callback, types.Message):
            user_id = message_or_callback.from_user.id
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è inline callback
        elif isinstance(message_or_callback, types.CallbackQuery):
            user_id = message_or_callback.from_user.id
        else:
            return await func(message_or_callback, *args, **kwargs)

        if user_id not in config.ALLOWED_USERS:
            if isinstance(message_or_callback, types.Message):
                await message_or_callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            elif isinstance(message_or_callback, types.CallbackQuery):
                await message_or_callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.", show_alert=True)
            return
        return await func(message_or_callback, *args, **kwargs)
    return wrapper


# --- –•–µ–Ω–¥–ª–µ—Ä—ã ---

@dp.message(F.text.in_(["/start"]))
@restricted
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞–º–∏ –ò–ò –±–æ—Ç–∞ –∫–æ–º–ø–∞–Ω–∏–∏ –ë–°–ö(Avito_Bitrix).\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É ‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏",
        reply_markup=main_kb
    )

@dp.message(F.text.in_(["üìä –°—Ç–∞—Ç—É—Å", "/status"]))
@restricted
async def status(message: types.Message):
    r = await get_redis()
    limit = await r.get("chat_limit") or 0
    count = await r.get("chat_count") or 0
    await message.answer(f"üìä –°—Ç–∞—Ç—É—Å:\n–õ–∏–º–∏—Ç: {limit}\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {count}", reply_markup=main_kb)

@dp.message(F.text.in_(["‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç", "/setlimit"]))
@restricted
async def ask_set_limit(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=quick_limit_keyboard("set"))
    await message.answer("–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∞", reply_markup=cancel_kb)
    await state.set_state(SetLimit.waiting_for_number)

@dp.message(SetLimit.waiting_for_number, F.text.regexp(r"^\d+$"))
@restricted
async def process_limit_input(message: types.Message, state: FSMContext):
    number = int(message.text)
    r = await get_redis()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
    await r.set("chat_limit", number)
    await r.set("chat_count", 0)
    
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    if number > 15:
        await r.set("limit_warning_sent", "0")
    
    await message.answer(f"‚úÖ –õ–∏–º–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {number}", reply_markup=main_kb)
    await state.clear()


@dp.message(F.text.in_(["‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫ –ª–∏–º–∏—Ç—É", "/add"]))
@restricted
async def ask_add_limit(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=quick_limit_keyboard("add"))
    await message.answer("–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∞", reply_markup=cancel_kb)
    await state.set_state(AddLimit.waiting_for_number)

@dp.message(AddLimit.waiting_for_number, F.text.regexp(r"^\d+$"))
@restricted
async def process_add_limit(message: types.Message, state: FSMContext):
    number = int(message.text)
    r = await get_redis()
    current = int(await r.get("chat_limit") or 0)
    new_limit = current + number

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç
    await r.set("chat_limit", new_limit)

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, –µ—Å–ª–∏ –ª–∏–º–∏—Ç —Ç–µ–ø–µ—Ä—å –±–æ–ª—å—à–µ 15
    if new_limit > 15:
        await r.set("limit_warning_sent", "0")

    await message.answer(f"‚ûï –õ–∏–º–∏—Ç —É–≤–µ–ª–∏—á–µ–Ω: +{number}, –Ω–æ–≤—ã–π={new_limit}", reply_markup=main_kb)
    await state.clear()


@dp.message(F.text.in_(["‚ùå –û—Ç–º–µ–Ω–∞"]))
@restricted
async def cancel_fsm(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", reply_markup=main_kb)
        return
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_kb)

@dp.callback_query(F.data.regexp(r"^(set|add)_limit:(\d+)$"))
@restricted
async def inline_limit_handler(callback: types.CallbackQuery, state: FSMContext):
    mode, value = callback.data.split("_limit:")
    value = int(value)
    r = await get_redis()

    if mode == "set":
        await r.set("chat_limit", value)
        await r.set("chat_count", 0)
        
        await callback.message.answer(f"‚úÖ –õ–∏–º–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {value}", reply_markup=main_kb)
        await state.clear()
    else:
        current = int(await r.get("chat_limit") or 0)
        new_limit = current + value
        await r.set("chat_limit", new_limit)
        await callback.message.answer(f"‚ûï –õ–∏–º–∏—Ç —É–≤–µ–ª–∏—á–µ–Ω: +{value}, –Ω–æ–≤—ã–π={new_limit}", reply_markup=main_kb)
        await state.clear()

    await callback.answer()

@dp.message(F.text.in_(["‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞", "/help"]))
@restricted
async def help_cmd(message: types.Message):
    text = (
        "‚ÑπÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/status ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ\n"
        "/setlimit ‚Äì —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç\n"
        "/add ‚Äì –¥–æ–±–∞–≤–∏—Ç—å –∫ –ª–∏–º–∏—Ç—É\n"
        "/help ‚Äì —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "–¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π üì≤"
    )
    await message.answer(text, reply_markup=main_kb)


async def set_commands():
    commands = [
        types.BotCommand(command="status", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å"),
        types.BotCommand(command="setlimit", description="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç"),
        types.BotCommand(command="add", description="–î–æ–±–∞–≤–∏—Ç—å –∫ –ª–∏–º–∏—Ç—É"),
        types.BotCommand(command="help", description="–°–ø—Ä–∞–≤–∫–∞"),
    ]
    await bot.set_my_commands(commands)

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –ø–æ–ª–ª–∏–Ω–≥ ---
async def main():
    await set_commands()
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –ø–æ–ª–ª–∏–Ω–≥")

    # –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    asyncio.create_task(monitor_limit())

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
