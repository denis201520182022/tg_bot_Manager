import os
import asyncio
import logging
from logging.handlers import RotatingFileHandler

import redis.asyncio as aioredis
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from functools import wraps
import config

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
log_dir = os.path.join(os.getcwd(), "logs")
os.makedirs(log_dir, exist_ok=True)
file_handler = RotatingFileHandler(
    os.path.join(log_dir, "tg_bot.log"), maxBytes=5_000_000, backupCount=3, encoding="utf-8"
)
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[file_handler, logging.StreamHandler()]
)

# --- Redis (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
async def get_redis():
    return aioredis.Redis(
        host=config.REDIS_HOST, port=int(config.REDIS_PORT), db=0, decode_responses=True
    )

# --- Telegram bot (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
bot = Bot(token=config.TG_BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())


# --- –ù–û–í–´–ô –ü–û–ú–û–©–ù–ò–ö –î–õ–Ø –ö–õ–Æ–ß–ï–ô REDIS ---
def get_redis_keys(bot_id: str) -> dict:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–ª—é—á–∏ Redis –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞, —É—á–∏—Ç—ã–≤–∞—è legacy-—Ä–µ–∂–∏–º."""
    bot_config = config.BOTS.get(bot_id, {})
    is_legacy = bot_config.get("legacy_keys", False)

    if is_legacy:
        return {
            "limit": "chat_limit",
            "count": "chat_count",
            "warning": "limit_warning_sent"
        }
    else:
        return {
            "limit": f"bot:{bot_id}:limit",
            "count": f"bot:{bot_id}:count",
            "warning": f"bot:{bot_id}:warning_sent"
        }

# --- –ò–ó–ú–ï–ù–ï–ù–ù–´–ï –ö–õ–ê–í–ò–ê–¢–£–†–´ ---
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
admin_menu_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å")],
        [KeyboardButton(text="‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç"), KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫ –ª–∏–º–∏—Ç—É")],
        [KeyboardButton(text="‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞"), KeyboardButton(text="‚Ü©Ô∏è –°–º–µ–Ω–∏—Ç—å –ø—Ä–æ–µ–∫—Ç")]
    ],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
client_menu_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å")],
        [KeyboardButton(text="‚Ü©Ô∏è –°–º–µ–Ω–∏—Ç—å –ø—Ä–æ–µ–∫—Ç")]
    ],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–º–µ–Ω—ã (–æ—Å—Ç–∞–ª–∞—Å—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
cancel_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]], resize_keyboard=True
)

# –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –ª–∏–º–∏—Ç–æ–≤ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
def quick_limit_keyboard(mode="set"):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="50", callback_data=f"{mode}_limit:50"),
                InlineKeyboardButton(text="100", callback_data=f"{mode}_limit:100"),
                InlineKeyboardButton(text="150", callback_data=f"{mode}_limit:150"),
            ]
        ]
    )

# --- –ü–û–õ–ù–û–°–¢–¨–Æ –ü–ï–†–ï–†–ê–ë–û–¢–ê–ù–ù–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì –õ–ò–ú–ò–¢–û–í ---
async def monitor_limit():
    r = await get_redis()
    while True:
        logging.info("–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤...")
        try:
            # –ò—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ –≤—Å–µ–º –±–æ—Ç–∞–º –≤ –∫–æ–Ω—Ñ–∏–≥–µ
            for bot_id, bot_config in config.BOTS.items():
                redis_keys = get_redis_keys(bot_id)
                bot_name = bot_config["name"]

                limit = int(await r.get(redis_keys["limit"]) or 0)
                count = int(await r.get(redis_keys["count"]) or 0)
                remaining = max(0, limit - count)

                warning_sent = await r.get(redis_keys["warning"]) == "1"

                # –ï—Å–ª–∏ –ø–æ—Ä–∞ —Å–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                if 0 < remaining <= 15 and not warning_sent:
                    users_to_notify = bot_config.get("admins", []) + bot_config.get("clients", [])
                    notification_text = f"‚ö†Ô∏è –í –ø—Ä–æ–µ–∫—Ç–µ '{bot_name}' –æ—Å—Ç–∞–ª–æ—Å—å –≤—Å–µ–≥–æ {remaining} –ª–∏–º–∏—Ç–æ–≤ –∏–∑ {limit}!"

                    for user_id in users_to_notify:
                        try:
                            await bot.send_message(user_id, notification_text)
                        except Exception as e:
                            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–ª—è –±–æ—Ç–∞ {bot_id}: {e}")

                    await r.set(redis_keys["warning"], "1")

                # –ï—Å–ª–∏ –ª–∏–º–∏—Ç –ø–æ–ø–æ–ª–Ω–∏–ª–∏, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
                elif remaining > 15 and warning_sent:
                    await r.set(redis_keys["warning"], "0")
        except Exception as e:
            logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–∏–º–∏—Ç–æ–≤: {e}")

        await asyncio.sleep(3600) # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑ –≤ —á–∞—Å


# --- –ò–ó–ú–ï–ù–ï–ù–ù–´–ï FSM –°–û–°–¢–û–Ø–ù–ò–Ø ---
class BotControl(StatesGroup):
    bot_selected = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª, –∫–∞–∫–∏–º –±–æ—Ç–æ–º —É–ø—Ä–∞–≤–ª—è—Ç—å
    set_limit = State()     # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —á–∏—Å–ª–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–∏–º–∏—Ç–∞
    add_limit = State()     # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —á–∏—Å–ª–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞


# --- –ù–û–í–´–ï –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ï –î–ï–ö–û–†–ê–¢–û–†–´ –î–û–°–¢–£–ü–ê ---
def check_access(required_role: str):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.
    required_role: 'admin' –∏–ª–∏ 'any' (admin –∏–ª–∏ client).
    """
    def decorator(func):
        @wraps(func)
        async def wrapper(message_or_callback, state: FSMContext, *args, **kwargs):
            if isinstance(message_or_callback, types.Message):
                user_id = message_or_callback.from_user.id
            elif isinstance(message_or_callback, types.CallbackQuery):
                user_id = message_or_callback.from_user.id
            else: # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–π–¥–µ—Ç –Ω–µ —Ç–∞–∫
                return

            user_data = await state.get_data()
            selected_bot = user_data.get("selected_bot")

            if not selected_bot:
                # –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–æ–∏–∑–æ–π—Ç–∏, –µ—Å–ª–∏ –±–æ—Ç –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω, –∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–æ—Å—å
                await message_or_callback.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–æ–º–∞–Ω–¥—É /start.")
                return

            bot_config = config.BOTS.get(selected_bot, {})
            admins = bot_config.get("admins", [])
            clients = bot_config.get("clients", [])

            has_access = False
            if required_role == 'admin' and user_id in admins:
                has_access = True
            elif required_role == 'any' and (user_id in admins or user_id in clients):
                has_access = True

            if not has_access:
                await message_or_callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.")
                return

            # –ü–µ—Ä–µ–¥–∞–µ–º bot_id –∏ redis_keys –≤ —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
            kwargs['bot_id'] = selected_bot
            kwargs['redis_keys'] = get_redis_keys(selected_bot)
            return await func(message_or_callback, state, *args, **kwargs)
        return wrapper
    return decorator


# --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø-–ü–û–ú–û–©–ù–ò–ö –î–õ–Ø –ü–†–ò–ú–ï–ù–ï–ù–ò–Ø –õ–ò–ú–ò–¢–û–í ---
async def _apply_limit(
    message: types.Message, 
    state: FSMContext, 
    mode: str, 
    value: int, 
    bot_id: str, 
    redis_keys: dict
):
    """–û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤."""
    r = await get_redis()
    bot_name = config.BOTS[bot_id]["name"]
    reply_text = ""

    if mode == "set":
        await r.set(redis_keys["limit"], value)
        await r.set(redis_keys["count"], 0)
        if value > 15:
            await r.set(redis_keys["warning"], "0")
        reply_text = f"‚úÖ –õ–∏–º–∏—Ç –¥–ª—è '{bot_name}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {value}"

    elif mode == "add":
        current_limit = int(await r.get(redis_keys["limit"]) or 0)
        current_count = int(await r.get(redis_keys["count"]) or 0)
        new_limit = current_limit + value
        await r.set(redis_keys["limit"], new_limit)
        
        remaining = new_limit - current_count
        if remaining > 15:
            await r.set(redis_keys["warning"], "0")
        reply_text = f"‚ûï –õ–∏–º–∏—Ç –¥–ª—è '{bot_name}' —É–≤–µ–ª–∏—á–µ–Ω: +{value}, –Ω–æ–≤—ã–π={new_limit}"

    await message.answer(reply_text, reply_markup=admin_menu_kb)
    await state.set_state(BotControl.bot_selected)

# --- –•–ï–ù–î–õ–ï–†–´ ---

# --- –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–π /start ---
@dp.message(F.text.in_(['/start', '‚Ü©Ô∏è –°–º–µ–Ω–∏—Ç—å –ø—Ä–æ–µ–∫—Ç']))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    user_id = message.from_user.id
    
    available_bots = []
    for bot_id, bot_config in config.BOTS.items():
        if user_id in bot_config.get("admins", []) or user_id in bot_config.get("clients", []):
            available_bots.append(
                InlineKeyboardButton(text=bot_config["name"], callback_data=f"select_bot:{bot_id}")
            )
            
    if not available_bots:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –Ω–∏ –∫ –æ–¥–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—É.")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[[b] for b in available_bots])
    await message.answer("üëã –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=keyboard)

# --- –ù–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –±–æ—Ç–∞ ---
@dp.callback_query(F.data.startswith("select_bot:"))
async def select_bot_handler(callback: types.CallbackQuery, state: FSMContext):
    bot_id = callback.data.split(":")[1]
    await state.set_state(BotControl.bot_selected)
    await state.update_data(selected_bot=bot_id)

    bot_config = config.BOTS[bot_id]
    user_id = callback.from_user.id

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∞–¥–º–∏–Ω –∏–ª–∏ –∫–ª–∏–µ–Ω—Ç, –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    if user_id in bot_config.get("admins", []):
        kb = admin_menu_kb
        role_text = "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
    else:
        kb = client_menu_kb
        role_text = "–∫–ª–∏–µ–Ω—Ç–∞"
    
    await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ '{bot_config['name']}'.\n–í–∞—à–∞ —Ä–æ–ª—å: {role_text}.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.", reply_markup=None)
    await callback.message.answer("–ú–µ–Ω—é:", reply_markup=kb)
    await callback.answer()


@dp.message(BotControl.bot_selected, F.text.in_(["üìä –°—Ç–∞—Ç—É—Å", "/status"]))
@check_access('any') # –î–æ—Å—Ç—É–ø –∏ –∞–¥–º–∏–Ω–∞–º, –∏ –∫–ª–∏–µ–Ω—Ç–∞–º
async def status(message: types.Message, state: FSMContext, bot_id: str, redis_keys: dict):
    r = await get_redis()
    limit = await r.get(redis_keys["limit"]) or 0
    count = await r.get(redis_keys["count"]) or 0
    bot_name = config.BOTS[bot_id]["name"]
    
    await message.answer(
        f"üìä –°—Ç–∞—Ç—É—Å –¥–ª—è '{bot_name}':\n"
        f"–õ–∏–º–∏—Ç: {limit}\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {count}\n–û—Å—Ç–∞–ª–æ—Å—å: {int(limit) - int(count)}"
    )

@dp.message(BotControl.bot_selected, F.text.in_(["‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç", "/setlimit"]))
@check_access('admin')
async def ask_set_limit(message: types.Message, state: FSMContext, **kwargs):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=quick_limit_keyboard("set"))
    await message.answer("–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∞", reply_markup=cancel_kb)
    await state.set_state(BotControl.set_limit)

@dp.message(BotControl.set_limit, F.text.regexp(r"^\d+$"))
@check_access('admin')
async def process_limit_input(message: types.Message, state: FSMContext, bot_id: str, redis_keys: dict):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–∏–º–∏—Ç–∞."""
    value = int(message.text)
    await _apply_limit(message, state, "set", value, bot_id, redis_keys)


@dp.message(BotControl.bot_selected, F.text.in_(["‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫ –ª–∏–º–∏—Ç—É", "/add"]))
@check_access('admin')
async def ask_add_limit(message: types.Message, state: FSMContext, **kwargs):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=quick_limit_keyboard("add"))
    await message.answer("–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∞", reply_markup=cancel_kb)
    await state.set_state(BotControl.add_limit)

@dp.message(BotControl.add_limit, F.text.regexp(r"^\d+$"))
@check_access('admin')
async def process_add_limit(message: types.Message, state: FSMContext, bot_id: str, redis_keys: dict):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞."""
    value = int(message.text)
    await _apply_limit(message, state, "add", value, bot_id, redis_keys)

@dp.callback_query(F.data.regexp(r"^(set|add)_limit:(\d+)$"))
@check_access('admin') # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
async def inline_limit_handler(callback: types.CallbackQuery, state: FSMContext, bot_id: str, redis_keys: dict):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏/–¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞."""
    current_state_str = await state.get_state()
    if current_state_str not in [BotControl.set_limit.state, BotControl.add_limit.state]:
        await callback.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.", show_alert=True)
        return

    mode, value_str = callback.data.split("_limit:")
    value = int(value_str)

    # –í—ã–∑—ã–≤–∞–µ–º –Ω–∞—à—É –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é, –ø–µ—Ä–µ–¥–∞–≤–∞—è –µ–π callback.message –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    await _apply_limit(callback.message, state, mode, value, bot_id, redis_keys)

    await callback.message.delete() # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π
    await callback.answer()


@dp.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_fsm(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    selected_bot = user_data.get("selected_bot")
    
    if selected_bot:
        user_id = message.from_user.id
        bot_config = config.BOTS[selected_bot]
        kb = admin_menu_kb if user_id in bot_config.get("admins", []) else client_menu_kb
        await state.set_state(BotControl.bot_selected)
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb)
    else:
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")


@dp.message(BotControl.bot_selected, F.text.in_(["‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞", "/help"]))
@check_access('admin')
async def help_cmd(message: types.Message, state: FSMContext, **kwargs):
    text = (
        "‚ÑπÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ —Ä–∞–º–∫–∞—Ö –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞:\n"
        "/status ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ\n"
        "/setlimit ‚Äì —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç (—Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫)\n"
        "/add ‚Äì –¥–æ–±–∞–≤–∏—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É –ª–∏–º–∏—Ç—É\n"
        "/help ‚Äì —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "–î–ª—è –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '‚Ü©Ô∏è –°–º–µ–Ω–∏—Ç—å –ø—Ä–æ–µ–∫—Ç' –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /start."
    )
    await message.answer(text, reply_markup=admin_menu_kb)


# --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –≤ –º–µ–Ω—é —Ç–µ–ª–µ–≥—Ä–∞–º–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
async def set_commands():
    commands = [
        types.BotCommand(command="start", description="–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å/–°–º–µ–Ω–∏—Ç—å –ø—Ä–æ–µ–∫—Ç"),
        types.BotCommand(command="status", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å"),
        types.BotCommand(command="setlimit", description="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç"),
        types.BotCommand(command="add", description="–î–æ–±–∞–≤–∏—Ç—å –∫ –ª–∏–º–∏—Ç—É"),
        types.BotCommand(command="help", description="–°–ø—Ä–∞–≤–∫–∞"),
    ]
    await bot.set_my_commands(commands)

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    await set_commands()
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –ø–æ–ª–ª–∏–Ω–≥")
    asyncio.create_task(monitor_limit()) # –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())